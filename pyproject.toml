[tool.poetry]
name = "aperilex"
version = "2.0.0"
description = "Secure SEC Filing Analysis Engine"
authors = ["Your Name <your.email@example.com>"]
readme = "README.md"
license = "MIT"
homepage = "https://github.com/yourusername/aperilex"
repository = "https://github.com/yourusername/aperilex"
documentation = "https://github.com/yourusername/aperilex"
keywords = ["sec", "filings", "analysis", "ai", "llm"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Financial",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

[tool.poetry.dependencies]
python = "^3.12"
# Web Framework
fastapi = "^0.116.0"
uvicorn = "^0.35.0"
# Data Validation
pydantic = "^2.11.7"
pydantic-settings = "^2.10.1"
# Database
sqlalchemy = "^2.0.41"
alembic = "^1.16.2"
asyncpg = "^0.29.0"
# Security
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
cryptography = "^42.0.0"
# HTTP Client
httpx = "^0.26.0"
# Cache
redis = "^5.0.1"
# Task Queue
celery = {extras = ["redis"], version = "^5.3.6"}
# Monitoring
prometheus-client = "^0.20.0"
opentelemetry-api = "^1.22.0"
opentelemetry-instrumentation-fastapi = "^0.43b0"
# Logging
structlog = "^24.1.0"
# LLM
openai = "^1.93.1"
anthropic = "^0.57.1"
# SEC Data
edgartools = "^4.3.1"
# Dependency Injection
dependency-injector = "^4.48.1"
# Utilities
python-dateutil = "^2.8.2"
orjson = "^3.9.14"
tenacity = "^8.2.3"

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^8.4.1"
pytest-asyncio = "^0.23.0"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
hypothesis = "^6.98.0"
factory-boy = "^3.3.0"
# Code Quality
mypy = "^1.16.1"
ruff = "^0.12.2"
black = "^25.1.0"
isort = "^5.13.0"
# Security
bandit = "^1.7.7"
safety = "^3.0.0"
# Development
ipython = "^8.21.0"
rich = "^13.7.0"
pre-commit = "^3.6.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
target-version = "py312"
line-length = 88
lint.select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
lint.ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.black]
target-version = ["py312"]
line-length = 88
skip-string-normalization = true

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
line_length = 88

[tool.mypy]
python_version = "3.12"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = "src.shared.config.settings"
disable_error_code = ["call-arg"]

[[tool.mypy.overrides]]
module = "src.infrastructure.database.base"
disable_error_code = ["misc"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "scripts"]
skips = ["B101", "B601"]